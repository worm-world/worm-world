import { Filter } from 'models/db/filter/Filter';
import React, { useState } from 'react';

/**
 * @type T is an autogenerated db_FieldName type
 * @type U is an autogenerated db_Record type
 */
export interface iSearchProps<T, U> {
  /** provide the api call that will fetch filtered db records */
  getFilteredRecordApi: (filter: Filter<T>) => Promise<U[]>;
  /** db Field Name you want to search on */
  searchOn: T;
  /** db Record field that corresponds to user input */
  selectInputOn: keyof U;
  /** list of all db Record fields that you want to the result to display as */
  displayResultsOn: Array<keyof U>;
  placeholder?: string;
}

export const DynamicSearch = <T, U>(props: iSearchProps<T, U>): JSX.Element => {
  const [searchRes, setSearchRes] = useState(new Array<U>());
  const [userInput, setUserInput] = useState('');
  const [, setSelectedRecord] = useState<U | undefined>();
  const onInputChange = (val: React.ChangeEvent<HTMLInputElement>): void => {
    setUserInput(val.target.value);
    const filter: Filter<T> = {
      filters: [[[props.searchOn, { Like: val.target.value }]]],
      orderBy: [],
    };
    props
      .getFilteredRecordApi(filter)
      .then((res) => {
        setSearchRes(res);
      })
      .catch((err) => err);
  };

  return (
    <>
      <div className='dropdown px-6'>
        <input
          type='text'
          placeholder={props.placeholder}
          className='input-bordered input w-full max-w-xs'
          onChange={onInputChange}
          value={userInput}
        />
        {searchRes.length === 0 ? (
          <></> // Don't show list if no results
        ) : (
          <ul className='dropdown-content menu rounded-box mt-2 mb-2 w-52  overflow-auto bg-base-100 p-2 shadow'>
            {searchRes.map((record, idx) => {
              return (
                <li
                  key={`${record}-${idx}`}
                  tabIndex={0}
                  onClick={() => {
                    setUserInput(record[props.selectInputOn] as string);
                    setSelectedRecord(record);
                    setSearchRes([]);
                  }}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      setUserInput(record[props.selectInputOn] as string);
                      setSelectedRecord(record);
                      setSearchRes([]);
                    }
                  }}
                >
                  <a>
                    {props.displayResultsOn
                      .map((field) => record[field] as string)
                      .join(', ')}
                  </a>
                </li>
              );
            })}
          </ul>
        )}
      </div>
    </>
  );
};
